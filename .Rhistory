new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T)) %>%
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T)) %>%
p_bin <- train(type ~ npreg +glu +bmi +ped +age_bin, preProcess = c("center", "scale"), data=newp,  method="glm")
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T))
p_bin <- train(type ~ npreg +glu +bmi +ped +age_bin, preProcess = c("center", "scale"), data=newp,  method="glm")
p_bin <- train(type ~ npreg +glu +bmi +ped +age_bin, preProcess = c("center", "scale"), data=new,  method="glm")
summary(p_bin)
library(arm)
summary(new$age_bin(24,28])
summary(new$age_bin)
invlogit(-1.10948 + 0.05043*1)
age_bin1<-invlogit(-1.10948 + 0.05043*1)
invlogit(-1.10948 + 0.05043*1)
invlogit(-1.10948 + 0.41201*1)
invlogit(-1.10948 + 0.33214*1)
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T))
p_bin <- train(type ~ npreg +glu +bmi +ped +age_bin,  data=new,  method="glm") %>%
standardize %>%
summary(p_bin)
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T))
p_bin <- train(type ~ rescale(npreg) +rescale(glu) +rescale(bmi) +rescale(ped) +age_bin,  data=new,  method="glm")
summary(p_bin)
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T))
p_bin <- standardize(glm(type ~ npreg + glu + bmi + ped +
age_bin, data=new, family=binomial))
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T))
p_bin <- train(type ~ rescale(npreg) +rescale(glu) +rescale(bmi) +rescale(ped) +age_bin,  data=new,  method="glm")
summary(p_bin)
invlogit(-1.5523  +  0.1163*1)
invlogit(-1.5523  + 0.9848*1)
invlogit(-1.5523  + 0.7663*1)
invlogit(-1.5523  +  0.1163*1)
invlogit(-1.5523  + 0.9848*1)
invlogit(-1.5523  + 0.7663*1)
summery(new)
summary(new)
invlogit(-1.5523  +  0.1163*133)
invlogit(-1.5523  +  0.1163*1)
invlogit(-1.5523 + 1.0421*3.428 + 2.1767*121.6 + 0.8857*32.92 + 1.4386*0.5198 + 0.9848*1)
invlogit(-1.5523 + 1.0421*3.428 + 2.1767*122.6 + 0.8857*32.92 + 1.4386*0.5198 + 0.9848*1)
setwd("~/Desktop")
c<-read.csv("college.csv", stringsAsFactors = TRUE)
summary(c)
c18<-c[c(-19)]
str(c18)
set.seed(1025)
cimp<-missForest(c18)
set.seed(1025)
rows<-sample(nrow(cimp$ximp), 0.7*nrow(cimp$ximp))
c_train<-cimp$ximp[rows, ]
c_test<-cimp$ximp[-rows, ]
str(c_train)
str(c_test)
c_lm<-train(Apps~ ., data=c_train, preProcess = c("center", "scale"),                 method = "lm")
summary(c_lm)
rmse(c_test$Apps, predict(c_lm, newdata=c_test))
set.seed(1025)
c_lass <- train(Apps~ ., data = c_train,
preProcess = c("center", "scale"), method = "glmnet",
tuneGrid= expand.grid(
alpha=1, lambda = seq(0,100, 1)))
rmse(c_test$Apps, predict(c_lass, newdata=c_test))
set.seed(1025)
c_ridg <- train(Apps~ ., data = c_train,
preProcess = c("center", "scale"), method = "glmnet",
tuneGrid= expand.grid(
alpha=0, lambda = seq(200,300, 1)))
rmse(c_test$Apps, predict(c_ridg, newdata=c_test))
setwd("~/Desktop")
p<-read.csv("pima.csv", stringsAsFactors = TRUE)
p8<-p[c(-1)]
str(p8)
pimp<-missForest(p8)
p_all <- train(type ~ ., data=pimp$ximp, method="glm")
summary(p_all)
p_5 <- train(type ~ npreg +glu +bmi +ped +age, data=pimp$ximp, method="glm")
summary(p_5)
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T))
p_bin <- train(type ~ npreg +glu +bmi +ped +age_bin,
preProcess =  c("center", "scale"), data=new,
method="glm")
summary(p_bin)
invlogit(-1.10741  +  0.08059*1)
invlogit(-1.10741  +  0.41438*1)
invlogit(-1.10741 + 0.41860*1)
summary(new)
invlogit(-1.10741 + 0.44674*3.426 + 1.12626*121.5 + 0.41728*32.97 + 0.68158*0.5184 + 0.41438*1)
invlogit(-1.10741 + 0.44674*3.426 + 1.12626*122.5 + 0.41728*32.97 + 0.68158*0.5184 + 0.41438*1)
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age), include.lowest =                 T))
(p_bin <- standardize(glm(type ~ npreg + glu + bmi + ped +
age_bin , data=new, family=binomial)))
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age),
include.lowest =T))
(p_bin <- standardize(glm(type ~ npreg + glu + bmi + ped +
age_bin , data=new, family=binomial)))
new<-pimp$ximp %>%
mutate(age_bin=cut(age, breaks = quantile(age),
include.lowest =T))
(p_bin <- standardize(glm(type ~ npreg + glu + bmi + ped +
age_bin , data=new, family=binomial)))
p_bin <- standardize(glm(type ~ npreg + glu + bmi + ped +
age_bin , data=new, family=binomial))
library(dplyr)
library(knitr)
library(missForest)
library(tidyverse)
library(ISLR)
library(caret)
library(arm)
model.matrix((p_bin))
model.matrix(p_bin)
(knnmod <- train(type ~ bmi + age, data=d,
preProcess=c("center", "scale"),
method="knn"))
knitr::opts_chunk$set(echo = T,  include=TRUE, warning = F, message = F)
library(dplyr)
library(ggplot2)
library(knitr)
setwd("~/Desktop")
read.csv("college.csv")
c<-read.csv("college.csv")
c<-read.csv("adult.csv")
c<-read.csv("adult.csv", stringsAsFactors = TRUE)
a<-read.csv("adult.csv", stringsAsFactors = TRUE)
setwd("~/Desktop")
a<-read.csv("adult.csv", stringsAsFactors = TRUE)
a%>%
select(income=1)%>%
group_by(occupation)
a%>%
group_by(occupation)%>%
select(income=1)
a%>%
select(income, occupation)%>%
filter(income==1)%>%
group_by(occupation)%>%
summarise(count = count(occupation))
a%>%
select(income, occupation)%>%
filter(income==1)%>%
group_by(occupation)%>%
summarise(count = count(income))
a%>%
group_by(occupation)%>%
summarise(count = count(income))
a%>%
group_by(occupation)%>%
summarise(sum = sum(income))
a%>%
group_by(occupation)%>%
summarise(sum = length(income))
a%>%
group_by(occupation)%>%
filter(income==1)
summarise(count = length(income))
a%>%
group_by(occupation)%>%
filter(income==1)
dplyr::summarise(count = length(income))
a%>%
group_by(occupation)%>%
filter(income==1)%>%
dplyr::summarise(count = length(income))
a%>%
group_by(occupation)%>%
filter(income==1)%>%
summarise(count = length(income))
a%>%
group_by(occupation)%>%
summarise(count = length(income))
a%>%
group_by(occupation,income)%>%
summarise(count = length(income))
a%>%
group_by(income,occupation)%>%
summarise(count = length(income))
a%>%
group_by(income,occupation)%>%
summarise(count = length(income>50K))
a%>%
group_by(income,occupation)%>%
summarise(count = length(income==2))
a%>%
group_by(income,occupation)%>%
summarise(count = length(income==">50K"))
a%>%
group_by(income,occupation)%>%
summarise(probability = length(income==">50K")/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(income==">50K")/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(income==2)/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = sum(income==2)/sum(income))
a%>%
group_by(occupation)%>%
summarise(probability = count(income==2)/count(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(income==2))/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2))/length(income))
a%>%
group_by(occupation,income)%>%
summarise(probability = length(subset(a, income==2))/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2))/(length(a,income==2)+length(a,income==1)))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2))/(length(subset(a,income==2))+length(subset(a,income==1))))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2))/length(income==1))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2))/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2)$occupation)/length(income)$occupation)
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$occupation)
/ length(income$occupation))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$occupation)
/ length(income$occupation))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$income)
/ length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$occupation)
/ length(occupation))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2))
/ length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)))
a%>%
group_by(occupation)%>%
summarise(probability = length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$occupation))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$income))
a%>%
group_by(occupation,income)%>%
summarise(probability = length(income))
a%>%
group_by(occupation,income)%>%
summarise(probability = length(subset(a, income==2)/length(income)))
a%>%
group_by(occupation,income)%>%
summarise(probability = length(subset(a, income==2))/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2))/length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2)))
a%>%
group_by(occupation)%>%
summarise(probability = sum(subset(a, income==2)))
a%>%
select(occupation, income) %>%
group_by(occupation)%>%
summarise(probability = length(subset(a, income==2)))
a%>%
group_by(occupation)%>%
summarise(probability = length(income==2))
a%>%
group_by(occupation)%>%
summarise(probability = length(income==1))
a%>%
group_by(occupation)%>%
summarise(probability = length(income))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$income))
a%>%
group_by(income, occupation)%>%
summarise(probability = length(subset(a,income==2)$income))
a%>%
group_by(income, occupation)%>%
summarise(probability = length(subset(a,income==2)))
a%>%
group_by(income, occupation)%>%
summarise(probability = length(subset(a,income==2)$occupation))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)$occupation))
a%>%
group_by(occupation)%>%
summarise(probability = length(subset(a,income==2)))
a%>%
group_by(occupation)%>%
dplyr::summarise(probability = length(subset(a,income==2)))
a%>%
group_by(occupation)%>%
dplyr::summarize(probability = length(subset(a,income==2)))
a%>%
group_by(occupation)%>%
summarize(probability = nrow(subset(a,income==2)))
a%>%
group_by(occupation)%>%
summarize(probability = nrow(subset(a,income==2)$occupation))
a%>%
group_by(occupation)%>%
summarize(probability = nrow(income))
a%>%
group_by(occupation)%>%
summarize(probability = length(income))
install.packages("pdftools")
install.packages("pdftools")
install.packages("pdftools")
install.packages("pdftools")
library(dplyr)
library(ggplot2)
library(knitr)
library(caret)
library(arm)
library(missForest)
library(MASS)
setwd("~/Desktop")
library(dplyr)
library(ggplot2)
library(knitr)
library(caret)
library(arm)
library(missForest)
library(MASS)
require("knitr")
opts_knit$set(root.dir = "~/Desktop")
bind_h<-hp[ , -81]
full<-rbind(bind_h, pred_test)
pred_test<-read.csv("test.csv", stringsAsFactors = TRUE)
full<-rbind(bind_h, pred_test)
full_imp<-missForest(full)
train_imp<-full_imp$ximp[c(1:1460), ]
test_imp<-full_imp$ximp[c(1461:2919), ]
sale_train_imp<-cbind(train_imp, hp$SalePrice)
sale_train_imp$Id<-NULL
prediction<-exp(predict(ridge_h3m, test_imp))
ridge_h3m <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + TotalSF, data=trh, preProcess = c("center", "scale"), method = "glmnet", tuneGrid= expand.grid(
alpha=0, lambda = seq(0,50, .5)))
set.seed(150)
rows <- sample(nrow(newhimp), .7*nrow(newhimp))
trh <- newhimp[rows, ]
teh <- newhimp[-rows, ]
ridge_h3m <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + TotalSF, data=trh, preProcess = c("center", "scale"), method = "glmnet", tuneGrid= expand.grid(
alpha=0, lambda = seq(0,50, .5)))
prediction<-exp(predict(ridge_h3m, test_imp))
ridge_h3m <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method = "glmnet", tuneGrid= expand.grid(
alpha=0, lambda = seq(0,50, .5)))
prediction<-exp(predict(ridge_h3m, test_imp))
summary(stepAIC(lm(SalePrice ~ ., data=sale_train_imp), direction = "forward"))
summary(stepAIC(lm(hp$SalePrice ~ ., data=sale_train_imp), direction = "forward"))
summary(stepAIC(lm(hp$SalePrice ~ ., data=sale_train_imp), direction = "backward"))
summary(stepAIC(lm(hp$SalePrice ~ ., data=sale_train_imp), direction  = "both"))
trainmodel1<-lm(hp$SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + BldgType + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + rescale(YearRemodAdd) + RoofStyle + RoofMatl + Exterior1st + MasVnrType + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) +
rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(FullBath) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + rescale(Fireplaces) + rescale(GarageCars) + rescale(GarageArea) + GarageQual + GarageCond + rescale(WoodDeckSF) + rescale(ScreenPorch) + rescale(PoolArea) + PoolQC + Fence + MiscFeature + SaleCondition, data = himp$ximp)
summary(trainmodel1)
summary(trainmodel2<-lm(hp$SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofStyle + RoofMatl + Exterior1st + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) + rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + GarageQual + GarageCond + rescale(ScreenPorch) + rescale(PoolArea) + Fence + MiscFeature + SaleCondition, data = himp$ximp))
trainmodel1<-lm(hp$SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + BldgType + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + rescale(YearRemodAdd) + RoofStyle + RoofMatl + Exterior1st + MasVnrType + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) +
rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(FullBath) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + rescale(Fireplaces) + rescale(GarageCars) + rescale(GarageArea) + GarageQual + GarageCond + rescale(WoodDeckSF) + rescale(ScreenPorch) + rescale(PoolArea) + PoolQC + Fence + MiscFeature + SaleCondition, data = sale_train_imp)
summary(trainmodel1)
summary(trainmodel2<-lm(hp$SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofStyle + RoofMatl + Exterior1st + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) + rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + GarageQual + GarageCond + rescale(ScreenPorch) + rescale(PoolArea) + Fence + MiscFeature + SaleCondition, data = sale_train_imp))
summary(trainmodel3<-lm(SalePrice ~ rescale(MSSubClass)+ rescale(LotArea)  + Neighborhood + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofMatl + BsmtQual  + BsmtExposure + rescale(BsmtFinSF1) + rescale(X1stFlrSF) + rescale(X2ndFlrSF), data = sale_train_imp))
summary(trainmodel3<-lm(hp$SalePrice ~ rescale(MSSubClass)+ rescale(LotArea)  + Neighborhood + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofMatl + BsmtQual  + BsmtExposure + rescale(BsmtFinSF1) + rescale(X1stFlrSF) + rescale(X2ndFlrSF), data = sale_train_imp))
rmse<- function(y,ypred){
sqrt(mean((y-ypred)^2))
}
rmse(hp$SalePrice,fitted(trainmodel3))
plot(h3m)
plot(trainmodel3)
set.seed(150)
rows <- sample(nrow(sale_train_imp), .7*nrow(sale_train_imp))
trh <- sale_train_imp[rows, ]
teh <- sale_train_imp[-rows, ]
lm_model<-train(log(hp$SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method= "lm")
lm_model<-train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method= "lm")
sale_train_imp<-cbind(train_imp, SalePrice=hp$SalePrice)
summary(stepAIC(lm(SalePrice ~ ., data=sale_train_imp), direction = "forward"))
trainmodel1<-lm(SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + BldgType + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + rescale(YearRemodAdd) + RoofStyle + RoofMatl + Exterior1st + MasVnrType + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) +
rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(FullBath) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + rescale(Fireplaces) + rescale(GarageCars) + rescale(GarageArea) + GarageQual + GarageCond + rescale(WoodDeckSF) + rescale(ScreenPorch) + rescale(PoolArea) + PoolQC + Fence + MiscFeature + SaleCondition, data = sale_train_imp)
summary(trainmodel1)
summary(trainmodel2<-lm(SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofStyle + RoofMatl + Exterior1st + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) + rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + GarageQual + GarageCond + rescale(ScreenPorch) + rescale(PoolArea) + Fence + MiscFeature + SaleCondition, data = sale_train_imp))
summary(trainmodel3<-lm(SalePrice ~ rescale(MSSubClass)+ rescale(LotArea)  + Neighborhood + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofMatl + BsmtQual  + BsmtExposure + rescale(BsmtFinSF1) + rescale(X1stFlrSF) + rescale(X2ndFlrSF), data = sale_train_imp))
rmse(sale_train_imp$SalePrice,fitted(trainmodel3))
lm_model<-train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method= "lm")
set.seed(150)
rows <- sample(nrow(sale_train_imp), .7*nrow(sale_train_imp))
trh <- sale_train_imp[rows, ]
teh <- sale_train_imp[-rows, ]
lm_model<-train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method= "lm")
summary(lm_model)
rmse(teh$SalePrice, exp(predict(lm_h3m, newdata=teh)))
rmse(teh$SalePrice, exp(predict(lm_model, newdata=teh)))
plot(lm_model$finalModel)
ridge_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method = "glmnet", tuneGrid= expand.grid(
alpha=0, lambda = seq(0,50, .5)))
ridge_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method = "glmnet", tuneGrid= expand.grid(
alpha=0, lambda = seq(0,50, .5)))
rmse(teh$SalePrice, exp(predict(ridge_model, newdata=teh)))
plot(ridge_model$finalModel)
plot(ridge_model$finalModel)
rmse(teh$SalePrice, exp(predict(lasso_model, newdata=teh)))
lasso_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + + TotalSF + , data=trh, preProcess = c("center", "scale"),
lasso_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF , data=trh, preProcess = c("center", "scale"),
method = "glmnet",
tuneGrid= expand.grid(
alpha=1,
lambda = seq(0,5, .1)))
plot(lasso_model)
rmse(teh$SalePrice, exp(predict(lasso_model, newdata=teh)))
mix_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"),
method = "glmnet",
tuneGrid= expand.grid(
alpha=0:1,
lambda = seq(0,10, .01)))
rmse(teh$SalePrice, exp(predict(mix_model, newdata=teh)))
plot(mix_model)
prediction<-exp(predict(ridge_model, test_imp))
prediction
View(prediction)
write.csv(prediction, file = "prediction.csv")
write.csv(prediction, file = "/Users/taohe/prediction.csv")
summary(stepAIC(lm(SalePrice ~ ., data=sale_train_imp), direction = "forward"))
summary(stepAIC(lm(SalePrice ~ ., data=sale_train_imp), direction = "backward"))
summary(stepAIC(lm(SalePrice ~ ., data=sale_train_imp), direction  = "both"))
trainmodel1<-lm(SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + BldgType + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + rescale(YearRemodAdd) + RoofStyle + RoofMatl + Exterior1st + MasVnrType + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtCond + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) +
rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(FullBath) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + rescale(Fireplaces) + rescale(GarageCars) + rescale(GarageArea) + GarageQual + GarageCond + rescale(WoodDeckSF) + rescale(ScreenPorch) + rescale(PoolArea) + PoolQC + Fence + MiscFeature + SaleCondition, data = sale_train_imp)
summary(trainmodel1)
summary(trainmodel3<-lm(SalePrice ~ rescale(MSSubClass)+ rescale(LotArea)  + Neighborhood + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofMatl + BsmtQual  + BsmtExposure + rescale(BsmtFinSF1) + rescale(X1stFlrSF) + rescale(X2ndFlrSF), data = sale_train_imp))
summary(trainmodel2<-lm(SalePrice ~ rescale(MSSubClass) + MSZoning + rescale(LotArea) + Street + LotConfig + LandSlope + Neighborhood + Condition1 + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofStyle + RoofMatl + Exterior1st + rescale(MasVnrArea) + ExterQual + BsmtQual + BsmtExposure + BsmtFinType1 + rescale(BsmtFinSF1) + rescale(BsmtFinSF2) + rescale(BsmtUnfSF) + rescale(X1stFlrSF) + rescale(X2ndFlrSF) + rescale(BedroomAbvGr) + rescale(KitchenAbvGr) + KitchenQual + rescale(TotRmsAbvGrd) + Functional + GarageQual + GarageCond + rescale(ScreenPorch) + rescale(PoolArea) + Fence + MiscFeature + SaleCondition, data = sale_train_imp))
summary(trainmodel3<-lm(SalePrice ~ rescale(MSSubClass)+ rescale(LotArea)  + Neighborhood + Condition2 + rescale(OverallQual) + rescale(OverallCond) + rescale(YearBuilt) + RoofMatl + BsmtQual  + BsmtExposure + rescale(BsmtFinSF1) + rescale(X1stFlrSF) + rescale(X2ndFlrSF), data = sale_train_imp))
rmse<- function(y,ypred){
sqrt(mean((y-ypred)^2))
}
rmse(sale_train_imp$SalePrice,fitted(trainmodel3))
plot(sale_train_imp$SalePrice)
plot(sale_train_imp$SalePrice)
summary(sale_train_imp$SalePrice)
lm_model<-train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method= "lm")
summary(lm_model)
rmse(teh$SalePrice, exp(predict(lm_model, newdata=teh)))
rmse(trh$SalePrice, exp(predict(lm_model, newdata=trh)))
plot(lm_model$finalModel)
plot(lm_model$finalModel)
library(dplyr)
library(ggplot2)
library(knitr)
library(caret)
library(arm)
library(missForest)
library(MASS)
require("knitr")
opts_knit$set(root.dir = "~/Desktop")
ridge_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"), method = "glmnet", tuneGrid= expand.grid(
alpha=0, lambda = seq(0,50, .5)))
rmse(teh$SalePrice, exp(predict(ridge_model, newdata=teh)))
plot(ridge_model$finalModel)
plot(ridge_model$finalModel)
plot(ridge_model)
24187-23657
lasso_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF , data=trh, preProcess = c("center", "scale"),
method = "glmnet",
tuneGrid= expand.grid(
alpha=1,
lambda = seq(0,5, .1)))
plot(lasso_model)
rmse(teh$SalePrice, exp(predict(lasso_model, newdata=teh)))
plot(lasso_model)
mix_model <- train(log(SalePrice) ~ MSSubClass+ LotArea + Neighborhood + Condition2 + OverallQual + OverallCond + YearBuilt + RoofMatl + BsmtQual  + BsmtExposure + BsmtFinSF1 + X1stFlrSF + X2ndFlrSF, data=trh, preProcess = c("center", "scale"),
method = "glmnet",
tuneGrid= expand.grid(
alpha=0:1,
lambda = seq(0,10, .01)))
rmse(teh$SalePrice, exp(predict(mix_model, newdata=teh)))
library(shiny); runApp('Documents/GitHub/SLC-Housing-Dashboard/dashboard.R')
library(shiny); runApp('Documents/GitHub/SLC-Housing-Dashboard/dashboard.R')
runApp('Documents/GitHub/SLC-Housing-Dashboard/dashboard.R')
runApp('Documents/GitHub/SLC-Housing-Dashboard/dashboard.R')
runApp('Documents/GitHub/SLC-Housing-Dashboard/dashboard.R')
runApp('Documents/GitHub/SLC-Housing-Dashboard/dashboard.R')
